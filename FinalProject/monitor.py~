#!/usr/bin/env python
# -*- coding: utf-8 -*-

import threading
import time
import mraa
import datetime
import requests
import smtplib
import random
import math

''' ********** Configuration ********** '''

HOT_LED = 5 # Red LED
WARM_LED = 6 # Yellow LED  
COLD_LED = 7 # Blue LED
BUZZER_PIN = 10

SENSOR_ADC_PIN = 0 # Used by the ADC (pin A0).
BUTTON_PULLUP_PIN = 4 # Used by the Hi-Z button.

COLD_TEMPERATURE = 23
WARM_TEMPERATURE = 25
HOT_TEMPERATURE = 27

ACC_TIME = 60.0 # 10 seconds to verify temperature
NUM_VALUES = 6

TIME_BETWEEN_EMAILS = 1800 # In seconds

# Email info and website info

SERVER_URL = 'server of website'

ADMINS = 'list of admins emails'
SERVER = 'mail server'
PORT = 'port of mail server'
EMAIL_USER = 'mail user'
EMAIL_PASSWORD = 'mail user password'
FROM = 'from user'

# Termistor data

THERMISTORNOMINAL = 10000 
TEMPERATURENOMINAL = 25
BCOEFFICIENT = 3950
SERIESRESISTOR = 10000

from private import *

''' ********** End of configuration ********** '''

# Handles button interruption on falling edge.   
def button_pressed(pin):
    time.sleep(0.2) # debounce delay
    if system.running:
        print '[button] The system has been stopped.' 
        system.stop()
        return
    print '[button] The system has been started.' 
    system.start()     
     
class ADCThread(threading.Thread):

    def __init__(self):
        super(ADCThread, self).__init__()
        self._stop = threading.Event()

    def stop(self):
        self._stop.set()

    def stopped(self):
        return self._stop.isSet()
        
    def run(self):  

        next_read = ACC_TIME/NUM_VALUES 
        while True:
           if self.stopped():
                exit() 
            
           # Read current temperature. 
           #sensor_value = 100 - int(100 * (system.adc.read() / 1023.0))

           sensor_value = system.adc.read() 
           relative_value = 1023.0 / sensor_value - 1;
           resistence_value = SERIESRESISTOR / relative_value;

           # Steinhart-Hart equation
           steinhart = resistence_value / THERMISTORNOMINAL
           steinhart = math.log(steinhart)
           steinhart /= BCOEFFICIENT
           steinhart += 1.0 / (TEMPERATURENOMINAL + 273.15)
           steinhart = 1.0 / steinhart
           steinhart -= 273.15;  

           temperature = steinhart
                      
           #sensor_value = 40 - int(40 * (system.adc.read() / 1023.0))
           print "[info] Current temperatue = %d ºC" temperature

           system.last_temperatures.append(sensor_value)

           # Check if it has enought values.   
           if(len(system.last_temperatures) == NUM_VALUES):
               # Calculate the average temperature.
                system.last_avg_temp = 0.0
                for temp in system.last_temperatures:
                    system.last_avg_temp += temp
                system.last_avg_temp /= NUM_VALUES
                system.last_temperatures = []
                system.send_info_website()

                # Take some decision base on average temperature.
                if system.last_avg_temp < 24:
                    system.cold_led.write(1)
                    system.warm_led.write(0)
                    system.hot_led_stop()
                    system.buzzer_stop()
                elif system.last_avg_temp < 26:
                    system.cold_led.write(0)
                    system.warm_led.write(1)
                    system.hot_led_stop()
                    system.buzzer_stop()
                else:
                    system.send_email_alert()
                    system.cold_led.write(0)
                    system.warm_led.write(0)
                    if 'buzzer' in system.threads:
                        if system.threads['buzzer'].stopped():
                            system.buzzer_start()
                    else:
                        system.buzzer_start()
                    if 'hot_led' in system.threads:
                        if system.threads['hot_led'].stopped():
                            system.hot_led_start()
                    else:
                        system.hot_led_start()
                    
           time.sleep(next_read)
            


''' 
Function that controls the buzzer signal.
'''          
class BuzzerThread(threading.Thread):   
                         
    def __init__(self):
        super(BuzzerThread, self).__init__()
        self._stop = threading.Event()

    def stop(self):
        self._stop.set()

    def stopped(self):
        return self._stop.isSet()
        
    def run(self):   
        while True:
            if self.stopped():
                exit()  
            system.buzzer.write(0)
            time.sleep(0.5)
            system.buzzer.write(1)
            time.sleep(0.5)

''' 
Function that sends info to the controller.
'''          
class HttpThread(threading.Thread):   
                         
    def __init__(self):
        super(BuzzerThread, self).__init__()
        self._stop = threading.Event()

    def stop(self):
        self._stop.set()

    def stopped(self):
        return self._stop.isSet()
        
    def run(self):   
        while True:
            if self.stopped():
                exit()  
            system.buzzer.write(0)
            time.sleep(0.5)
            system.buzzer.write(1)
            time.sleep(0.5)


''' 
Function that controls the PWM hot LED signal.
'''          
class HotLEDThread(threading.Thread):   
                         
    def __init__(self):
        super(HotLEDThread, self).__init__()
        self._stop = threading.Event()

    def stop(self):
        self._stop.set()

    def stopped(self):
        return self._stop.isSet()
        
    def run(self):   
        while True:
            if self.stopped():
                exit()  
            system.hot_led.write(1)
            time.sleep(0.5)
            system.hot_led.write(0)
            time.sleep(0.5)         


class System:
      
    def __init__(self):
    
        # Important variables.
        self.threads = {}
        self.running = False
        self.last_temperatures = []
        self.last_avg_temp = 0
        self.messages_to_send = []
        self.moment_last_email = datetime.datetime(1970, 1, 1)
        
        # Configure the digital outputs for cold and warm led.
        self.cold_led = mraa.Gpio(COLD_LED)
        self.warm_led = mraa.Gpio(WARM_LED) 
        self.hot_led = mraa.Gpio(HOT_LED)
        self.buzzer = mraa.Gpio(BUZZER_PIN)

        self.cold_led.dir(mraa.DIR_OUT)   
        self.warm_led.dir(mraa.DIR_OUT) 
        self.hot_led.dir(mraa.DIR_OUT) 
        self.buzzer.dir(mraa.DIR_OUT) 
        
        self.cold_led.write(0)
        self.warm_led.write(0)
        self.hot_led.write(0)
        self.buzzer.write(1)

        # Configures the Hi-Z button.
        self.button = mraa.Gpio(BUTTON_PULLUP_PIN) 
        self.button.dir(mraa.DIR_IN)        
        self.button.mode(mraa.MODE_PULLUP)
        self.button.isr(mraa.EDGE_FALLING, button_pressed, self.button)   

        # Configures the ADC.
        self.adc = mraa.Aio(SENSOR_ADC_PIN)

    def adc_start(self):
        # Start ADC thread.
        self.threads['adc'] = ADCThread()
        self.threads['adc'].setDaemon(True)
        self.threads['adc'].start()
        
    def adc_stop(self):
        if 'adc' in self.threads:
            self.threads['adc'].stop()

    def buzzer_start(self):
        self.threads['buzzer'] = BuzzerThread()
        self.threads['buzzer'].setDaemon(True)
        self.threads['buzzer'].start()
  
    def buzzer_stop(self):
        if 'buzzer' in self.threads:
            self.threads['buzzer'].stop()
        self.buzzer.write(1)
    
    def hot_led_start(self): 
        self.threads['hot_led'] = HotLEDThread()
        self.threads['hot_led'].setDaemon(True)
        self.threads['hot_led'].start()

    def hot_led_stop(self):
        if 'hot_led' in self.threads:
            self.threads['hot_led'].stop()
        self.hot_led.write(0)

    def send_info_website(self):
        current_time = datetime.datetime.now().isoformat()
        info = {
            'current_time': current_time,
            'last_avg_temp': self.last_avg_temp,
        }
        try:
            req = requests.post(SERVER_URL, data=info, timeout=3)
        except Exception, e:
            print "error = ", e
            pass

    def send_email_alert(self): 

        # Check the last email sent.
        now = datetime.datetime.now()
        dif = now - self.moment_last_email
        if dif.total_seconds() < TIME_BETWEEN_EMAILS: #  Don't send email
            return
        
        self.moment_last_email = now
        current_time = now.isoformat()
        TO = ADMINS if type(ADMINS) is list else [ADMINS]
        SUBJECT = "DataCenterMonitor - Temperature warning"
        TEXT = '''
        Report generated at %s.
        The current temperature of the datacenter is %.2f ºC
        ''' %(current_time, self.last_avg_temp) 

        # Prepare actual message
        message = """From: %s\nTo: %s\nSubject: %s\n\n%s
        """ % (FROM, ", ".join(TO), SUBJECT, TEXT)
        
        server = smtplib.SMTP(SERVER, 587)
        server.ehlo()
        server.starttls()
        server.ehlo()
        server.login(EMAIL_USER, EMAIL_PASSWORD)
        server.sendmail(FROM, TO, message)
        server.close()

    def start(self):
        self.running = True
        self.adc_start()

    def stop(self):
        self.running = False
        self.adc_stop()
        self.buzzer_stop()
        self.hot_led_stop()
        self.last_temperatures = []
        self.last_avg_temp = 0.0

        self.cold_led.write(0)
        self.warm_led.write(0)
        self.hot_led.write(0)
        self.buzzer.write(1)

if __name__ == "__main__":
    try:
        system = System()
        print "[info] The system is configured and ready."
        while True: pass
    except KeyboardInterrupt:
        system.stop()
 
